---
title: "Assignment 10"
author: "Dakota Alfson"
date: "10/21/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r, echo = FALSE, warning = FALSE, message = FALSE}
library(readr)
library(rcompanion)
library(moments)
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
library(corrplot)
library(shinythemes)
library(readxl)
library(GGally)
library(maptree)
library(rpart)
library(party)
library(partykit)
library(gains)
library(faraway)
library(car)
library(MuMIn)
```

```{r, echo = FALSE, warning = FALSE, message = FALSE}
all_years <- read_csv("2015.csv")
all_years$generosity <- as.numeric(all_years$generosity)
all_years <- na.omit(all_years)
all_years$year <- as.factor(all_years$year)
```

# World Happiness Report
### This dataset is from Kaggle. 

### "The World Happiness Report is a landmark survey of the state of global happiness." The report lists over 155 countries by their happiness levels. There are 6  factors that contribute to making life evaluations higher per country-- economic production, social support, life expectancy, freedom, absence of government corruption, and generosity. These factors have no impact on the total happiness score for each country, but they do explain why some countries rank higher than others.

```{r, echo = FALSE, warning = FALSE, message = FALSE}
head(all_years)
```

```{r, echo = FALSE, warning = FALSE, message = FALSE}
str(all_years)
```

```{r, echo = FALSE, warning = FALSE, message = FALSE}
summary(all_years)
```

## Data Transformations

```{r, echo = FALSE, warning = FALSE, message = FALSE, fig.show = 'hide'}
#Log transformations
all_years$family.log <- log(all_years$family + 1)
all_years$govt.corrupt.log <- log(all_years$govt.corrupt + 1)
all_years$generosity.log <- log(all_years$generosity + 1)
all_years$freedom.log <- log(all_years$freedom + 1)

#Square Root Transformations
all_years$family.sqrt <- sqrt(all_years$family)
all_years$govt.corrupt.sqrt <- sqrt(all_years$govt.corrupt)
all_years$generosity.sqrt <- sqrt(all_years$generosity)
all_years$freedom.sqrt <- sqrt(all_years$freedom)
#Cube Root Transformations
all_years$family.crt <- (all_years$family)^(1/3)
all_years$govt.corrupt.crt <- (all_years$govt.corrupt)^(1/3)
all_years$generosity.crt <- (all_years$generosity)^(1/3)
all_years$freedom.crt <- (all_years$freedom)^(1/3)

#Tukey's Ladder of Powers Transformations
all_years$family.tukey <- transformTukey(all_years$family)
all_years$govt.corrupt.tukey <- transformTukey(all_years$govt.corrupt)
all_years$generosity.tukey <- transformTukey(all_years$family)
all_years$freedom.tukey <- transformTukey(all_years$freedom)
```

```{r, echo = FALSE, warning = FALSE, message = FALSE}
Asia <- c("Afghanistan", "Armenia", "Azerbaijan", "Bahrain", "Bangladesh", "Bhutan","Brunei", "Cambodia", "China", "Hong Kong", "Hong Kong S.A.R., China", "India", "Indonesia", "Iran", "Iraq", "Israel", "Japan", "Jordan", "Kazakhstan", "Kuwait", "Kyrgyzstan", "Laos", "Lebanon", "Malaysia", "Maldives", "Mongolia", "Myanmar", "Nepal", "North Korea", "Oman", "Pakistan", "Palestine", "Palestinian Territories", "Philippines", "Qatar", "Taiwan Province of China", "Russia", "Saudi Arabia", "Singapore", "South Korea", "Sri Lanka", "Syria", "Taiwan", "Tajikistan", "Thailand", "Turkey", "Turkmenistan", "United Arab Emirates", "Uzbekistan", "Vietnam", "Yemen")

Africa <- c("Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros", "Congo (Brazzaville)", "Congo (Kinshasa)", "Djibouti", "Egypt", "Eswatini", "Ethiopia", "Gabon", "Gambia", "Ghana", "Guinea", "Ivory Coast", "Kenya", "Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda", "Senegal", "Seychelles", "Sierra Leone", "Somalia", "Somaliland Region", "Somaliland region", "South Africa", "South Sudan", "Sudan", "Swaziland", "Tanzania", "Togo", "Tunisia", "Uganda", "Zambia", "Zimbabwe")

North_America <- c("Belize", "Canada", "Costa Rica", "Cuba", "Dominica", "Dominican Republic", "El Salvador", "Grenada", "Guatemala", "Haiti", "Honduras", "Jamaica", "Mexico", "Nicaragua", "Panama", "Puerto Rico", "Trinidad & Tobago", "Trinidad and Tobago", "United States")

South_America <- c("Argentina", "Bolivia", "Brazil", "Chile", "Colombia", "Ecuador", "Guyana", "Paraguay", "Peru", "Suriname", "Uruguay", "Venezuela")

Europe <- c("Albania", "Andorra", "Armenia", "Austria", "Azerbaijan", "Belarus", "Belgium", "Bosnia and Herzegovina", "Bulgaria", "Croatia", "Cyprus", "North Cyprus", "Northern Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Georgia", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "North Macedonia", "Norway", "Poland", "Portugal", "Romania", "San Marino", "Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Turkey", "Ukraine", "United Kingdom")

Australia <- c("Australia", "New Zealand")

all_years <- all_years %>%
  mutate(region = ifelse(country %in% Asia, "Asia",
                           ifelse(country %in% Africa, "Africa",
                             ifelse(country %in% North_America, "North America", 
                               ifelse(country %in% South_America, "South America",
                                ifelse(country %in% Europe, "Europe",
                                  ifelse(country %in% Australia, "Australia",
"Other")))))))





#Sampling for decision tree
set.seed(123)
sample = sample_n(all_years, 624)
test = setdiff(all_years, sample)

write.csv(sample, file="final_sampledata.csv")
write.csv(test, file="final_testdata.csv")

sample <- read.csv("final_sampledata.csv")
test <- read.csv("final_testdata.csv")

sample$region <- as.factor(sample$region)
test$region <- as.factor(test$region)
```

```{r, echo = FALSE, warning = FALSE, message = FALSE}
region <- c("Asia", "Africa", "North America", "South America", "Europe", "Australia")
year <- c(2015, 2016, 2017, 2018, 2019)

# Asia Averages by Year
avg.2015 <- mean(all_years$score[which(all_years$year== 2015 & all_years$region== 'Asia')])
avg.2016 <- mean(all_years$score[which(all_years$year== 2016 & all_years$region== 'Asia')])
avg.2017 <- mean(all_years$score[which(all_years$year== 2017 & all_years$region== 'Asia')])
avg.2018 <- mean(all_years$score[which(all_years$year== 2018 & all_years$region== 'Asia')])
avg.2019 <- mean(all_years$score[which(all_years$year== 2019 & all_years$region== 'Asia')])
asia_avg <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

# Africa Averages by Year
avg.2015 <- mean(all_years$score[which(all_years$year== 2015 & all_years$region== 'Africa')])
avg.2016 <- mean(all_years$score[which(all_years$year== 2016 & all_years$region== 'Africa')])
avg.2017 <- mean(all_years$score[which(all_years$year== 2017 & all_years$region== 'Africa')])
avg.2018 <- mean(all_years$score[which(all_years$year== 2018 & all_years$region== 'Africa')])
avg.2019 <- mean(all_years$score[which(all_years$year== 2019 & all_years$region== 'Africa')])
africa_avg <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

# North America Averages by Year
avg.2015 <- mean(all_years$score[which(all_years$year== 2015 & all_years$region== 'North America')])
avg.2016 <- mean(all_years$score[which(all_years$year== 2016 & all_years$region== 'North America')])
avg.2017 <- mean(all_years$score[which(all_years$year== 2017 & all_years$region== 'North America')])
avg.2018 <- mean(all_years$score[which(all_years$year== 2018 & all_years$region== 'North America')])
avg.2019 <- mean(all_years$score[which(all_years$year== 2019 & all_years$region== 'North America')])
north_america_avg <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

# South America Averages by Year
avg.2015 <- mean(all_years$score[which(all_years$year== 2015 & all_years$region== 'South America')])
avg.2016 <- mean(all_years$score[which(all_years$year== 2016 & all_years$region== 'South America')])
avg.2017 <- mean(all_years$score[which(all_years$year== 2017 & all_years$region== 'South America')])
avg.2018 <- mean(all_years$score[which(all_years$year== 2018 & all_years$region== 'South America')])
avg.2019 <- mean(all_years$score[which(all_years$year== 2019 & all_years$region== 'South America')])
south_america_avg <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

# Europe Averages by Year
avg.2015 <- mean(all_years$score[which(all_years$year== 2015 & all_years$region== 'Europe')])
avg.2016 <- mean(all_years$score[which(all_years$year== 2016 & all_years$region== 'Europe')])
avg.2017 <- mean(all_years$score[which(all_years$year== 2017 & all_years$region== 'Europe')])
avg.2018 <- mean(all_years$score[which(all_years$year== 2018 & all_years$region== 'Europe')])
avg.2019 <- mean(all_years$score[which(all_years$year== 2019 & all_years$region== 'Europe')])
europe_avg <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

# Australia Averages by Year
avg.2015 <- mean(all_years$score[which(all_years$year== 2015 & all_years$region== 'Australia')])
avg.2016 <- mean(all_years$score[which(all_years$year== 2016 & all_years$region== 'Australia')])
avg.2017 <- mean(all_years$score[which(all_years$year== 2017 & all_years$region== 'Australia')])
avg.2018 <- mean(all_years$score[which(all_years$year== 2018 & all_years$region== 'Australia')])
avg.2019 <- mean(all_years$score[which(all_years$year== 2019 & all_years$region== 'Australia')])
australia_avg <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

region_avgs <- data.frame(year, asia_avg, africa_avg, north_america_avg, south_america_avg, europe_avg, australia_avg)
colnames(region_avgs) <- c('year', region)
region_avgs$year <- as.factor(region_avgs$year)
```

```{r, echo = FALSE, warning = FALSE, message = FALSE}
region <- c("Asia", "Africa", "North America", "South America", "Europe", "Australia")
year <- c(2015, 2016, 2017, 2018, 2019)

# Asia Averages by Year
avg.2015 <- mean(all_years$rank[which(all_years$year== 2015 & all_years$region== 'Asia')])
avg.2016 <- mean(all_years$rank[which(all_years$year== 2016 & all_years$region== 'Asia')])
avg.2017 <- mean(all_years$rank[which(all_years$year== 2017 & all_years$region== 'Asia')])
avg.2018 <- mean(all_years$rank[which(all_years$year== 2018 & all_years$region== 'Asia')])
avg.2019 <- mean(all_years$rank[which(all_years$year== 2019 & all_years$region== 'Asia')])
asia_avg_rank <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

# Africa Averages by Year
avg.2015 <- mean(all_years$rank[which(all_years$year== 2015 & all_years$region== 'Africa')])
avg.2016 <- mean(all_years$rank[which(all_years$year== 2016 & all_years$region== 'Africa')])
avg.2017 <- mean(all_years$rank[which(all_years$year== 2017 & all_years$region== 'Africa')])
avg.2018 <- mean(all_years$rank[which(all_years$year== 2018 & all_years$region== 'Africa')])
avg.2019 <- mean(all_years$rank[which(all_years$year== 2019 & all_years$region== 'Africa')])
africa_avg_rank <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

# North America Averages by Year
avg.2015 <- mean(all_years$rank[which(all_years$year== 2015 & all_years$region== 'North America')])
avg.2016 <- mean(all_years$rank[which(all_years$year== 2016 & all_years$region== 'North America')])
avg.2017 <- mean(all_years$rank[which(all_years$year== 2017 & all_years$region== 'North America')])
avg.2018 <- mean(all_years$rank[which(all_years$year== 2018 & all_years$region== 'North America')])
avg.2019 <- mean(all_years$rank[which(all_years$year== 2019 & all_years$region== 'North America')])
north_america_avg_rank <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

# South America Averages by Year
avg.2015 <- mean(all_years$rank[which(all_years$year== 2015 & all_years$region== 'South America')])
avg.2016 <- mean(all_years$rank[which(all_years$year== 2016 & all_years$region== 'South America')])
avg.2017 <- mean(all_years$rank[which(all_years$year== 2017 & all_years$region== 'South America')])
avg.2018 <- mean(all_years$rank[which(all_years$year== 2018 & all_years$region== 'South America')])
avg.2019 <- mean(all_years$rank[which(all_years$year== 2019 & all_years$region== 'South America')])
south_america_avg_rank <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

# Europe Averages by Year
avg.2015 <- mean(all_years$rank[which(all_years$year== 2015 & all_years$region== 'Europe')])
avg.2016 <- mean(all_years$rank[which(all_years$year== 2016 & all_years$region== 'Europe')])
avg.2017 <- mean(all_years$rank[which(all_years$year== 2017 & all_years$region== 'Europe')])
avg.2018 <- mean(all_years$rank[which(all_years$year== 2018 & all_years$region== 'Europe')])
avg.2019 <- mean(all_years$rank[which(all_years$year== 2019 & all_years$region== 'Europe')])
europe_avg_rank <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

# Australia Averages by Year
avg.2015 <- mean(all_years$rank[which(all_years$year== 2015 & all_years$region== 'Australia')])
avg.2016 <- mean(all_years$rank[which(all_years$year== 2016 & all_years$region== 'Australia')])
avg.2017 <- mean(all_years$rank[which(all_years$year== 2017 & all_years$region== 'Australia')])
avg.2018 <- mean(all_years$rank[which(all_years$year== 2018 & all_years$region== 'Australia')])
avg.2019 <- mean(all_years$rank[which(all_years$year== 2019 & all_years$region== 'Australia')])
australia_avg_rank <- c(avg.2015, avg.2016, avg.2017, avg.2018, avg.2019)

region_avg_ranks <- data.frame(year, asia_avg_rank, africa_avg_rank, north_america_avg_rank, south_america_avg_rank, europe_avg_rank, australia_avg_rank)
colnames(region_avg_ranks) <- c('year', region)
region_avg_ranks$year <- as.factor(region_avg_ranks$year)
```

```{r, echo = FALSE, warning = FALSE, message = FALSE}
## UI
# Use a fluid Bootstrap layout
ui <- navbarPage(theme = shinytheme('readable'), "Distribution of Variables",
                 
            navbarMenu("About",
                       tabPanel("Data Set",
                                p("The World Happiness Report is a landmark survery of the state of global happiness. The report was first published in 2012. Since then, the report has continued to gain global recognition as governments, organizations, and civil society increasingly use happiness indicators to inform their policy-making decisions. The reports review the state of happiness in the world today and show how the new science of happness explains your personal and national variations in happiness."),
                                p("The happiness scores and rankings use data from the Gallup World Poll. The scores are based on answers to the pain life evaluation question asked in the poll. The question is known as the Cantril ladder, and it asks respondents to think of a ladder with the best possible life for them being a 10 and the worst possible life being a 0 and to rate their own current lives on that scale. The scores are from nationally representative samples and use the Gallup weights to make the estimates representative. Six factors - economic production, social support, life expectancy, freedom, absence of corruption, and generosity- estimate the extent to which they contribute to making life evaluations higher in each country than in Dystopia. Dystopia is a hypothetical country that has values equal to the world's lowest national averages for each of the six factors. The factors have no impact on the total score reported for each country, but they do explain why some countries rank higher than others.")),
                       tabPanel("Variables",
                                p("'country': Country name"),
                                p("'rank': Rank of country based on the happiness score"),
                                p("'score': A metric measured by asking the sampled people the question: 'How would you rate your happiness on a scale from 1 to 10?'"),
                                p("'economy: the extent to which GPD contributes to the calculation of the Happiness Score"),
                                p("'family': The extent to which social support contributes to the calculation of the Happiness Score"),
                                p("'life.exp': The extent to which ife expectancy contributes to the calculation of the Happiness Score"),
                                p("'freedom': The extent to which the freedom to make choices contributes to the calculation of the Happiness Score"),
                                p("'govt.currpt': The extent to which perception of corruption contributes to the Happiness Score"))),
            
            navbarMenu("Plots",
                         
                         tabPanel("Histograms", fluid = TRUE,
                                  sidebarLayout(sidebarPanel(
                                      selectInput("cid", "Select a Variable:", 
                                                  choices = colnames(all_years[c(3:9, 11:26)]))),
                                  
                                  mainPanel(plotOutput("happinessPlot")))),
                         
                         tabPanel("Rank Plots", fluid = TRUE,
                                  sidebarLayout(sidebarPanel(
                                      textInput("text", "Enter a Specific Country:", 
                                                value = 'United States'),
                                      sliderInput("cid2", "Select the number of Happiest Countries:",
                                                  min = 0, max = 25, value = 10)),
                                  
                                  mainPanel(plotlyOutput("happinessPlot2"),
                                  plotlyOutput("happinessPlot1")))),
                        
                         tabPanel("Score Plots", fluid = TRUE,
                                  sidebarLayout(sidebarPanel(
                                    textInput("text2", "Enter a Specific Country:", 
                                                value = 'United States')),
                                    
                                  mainPanel(plotlyOutput("happinessPlot3")))),
                        
                        tabPanel("Correlations", plotOutput("happinessPlot4"), plotOutput("happinessPlot5")),
                       
                        tabPanel("Averages", plotlyOutput("happinessPlot6"), br(), plotlyOutput("happinessPlot10"))),
                       
            navbarMenu("Models",
                       
                        tabPanel("Linear Models", fluid = TRUE,
                                  sidebarLayout(sidebarPanel(
                                      selectInput("cid5", "Select a Variable:", 
                                                  choices = colnames(all_years[c(3:9, 11:26)]))),
                                  
                                  mainPanel(verbatimTextOutput("info"),
                                  p("The skewness of score and economy are between -0.5 and 0.5, so we do not need to apply any transformations to it."),
                                  p("Family is outside of the range, so we apply transformations- the Tukey's Ladder of Powers Transformation works best."),
                                  p("Life.exp is barely within the accepted range. "),
                                  p("Freedom is outside of the range. Again, the Tukey's Ladder of Powers Transformation works best."),
                                  p("The Tukey Transformation works best on govt.corrupt."),
                                  p("The square root transformation works best on generosity."),
                                  verbatimTextOutput("info1")))),
                       
                       tabPanel("Decision Tree", fluid = TRUE,
                                  mainPanel(
                                    p("A decision tree was built to predict happiness in countries. A random sample of about 80% of the rows was used to build the model."),
                                    p("Below is a summary of the model. Note the Variable Importance; in order from most important to least important variables, we have economy, life.exp, region, family, freedom, govt.corrupt, generosity."),
                                    verbatimTextOutput("info2"),
                                    p("Below is the decision tree. To decipher the tree, we will look at the top as an example. First, if economy's value is greater than 1.061885, we go left. If economy's value is less than 1.061885, then we go right. If we we were to go right, our next decision is whether life.exp is less than or greater than 0.4655045275. We see that 354 of the 624 original rows went right. If we go right again (i.e., life.exp is less than 0.4676095275), there are 160 rows remaining. These rows are predicted to have an average rank of 129.11. The rest of the rows go through other similar calculations throughout the decision tree."),
                                    plotOutput(outputId = "happinessPlot7", height = "900px", width = "1700px"),
                                    p("Now, we will use this tree to predict the rankings of the remaining 20% of the rows. On the table below, the Mean Resp column represents the means of the observed rows (20%), while the Mean Model Score represents the predicted average from the tree model. These different means are in order from right to left on the tree (or descending order on the table). So, for example, (looking at the top row) the average rank of the observed rows on Node 7 was 126.65, and my model predicted the average rank would be 129.11. Likewise, (looking at the bottom row), the average rank of the observed rows on Node 1 was 19.38, and my model predicted the average rank would be 20.07."),
                                    verbatimTextOutput("info3"),
                                    p("The means are visually represented on the plot below:"),
                                    plotOutput("happinessPlot8")
                  
                       ))
            ),
            
            navbarMenu("Customizable",
                       
                       tabPanel("Scatter Plots", fluid = TRUE,
                                sidebarLayout(sidebarPanel(
                                  
                                  #Generate x-axis
                                  selectInput(inputId = "x",
                                    label = "X-axis:",
                                    choices = colnames(all_years[c(2:9)]),
                                    selected = colnames(all_years[3])),
            
                                  #Generate y-axis
                                  selectInput(inputId = "y",
                                    label = "Y-axis:",
                                    choices = colnames(all_years[c(2:9)]),
                                    selected = colnames(all_years[4])),
                                  
                                  #Year Button
                                  radioButtons("cid4", "Select a Year:",
                                               choices = list("2015" = 2015, "2016" = 2016, "2017" = 2017,
                                                              "2018" = 2018, "2019" = 2019)),
                                  
                                  #Continent Checkbox
                                  checkboxGroupInput(inputId = "continentboxid",
                                    label = "Choose Continent(s):",
                                    choices = list("Africa", "Asia", "Australia", "Europe", "North America", "South America"),
                                    selected = list("Africa", "Asia", "Australia", "Europe", "North America", "South America"))),
                                  
                                  mainPanel(plotlyOutput('happinessPlot9')))))
                       
                                
)

## Server

# Define a server for the Shiny app
server <- function(input, output) {
    
    output$happinessPlot <- renderPlot({
        
        x    <- all_years[,input$cid]
        
        
        titl <- paste("Histogram of", input$cid, sep = " ")
        plotNormalHistogram(x, main = titl)
        
    })
    
    output$info <- renderPrint({
        
        x    <- all_years[,input$cid5]
        
        titl <- paste("Skewness of:", input$cid5, sep = " ")
        print(titl)
        skewness(x)
    })
    
    output$info1 <- renderPrint({
        
        x    <- all_years[,input$cid5]
        
        fit <- lm(all_years$rank ~ ., data = as.data.frame(x))
        summary(fit)
    })    
    
    output$happinessPlot1 <- renderPlotly({
        top_10 <- filter(all_years, rank <= input$cid2)
        titl <- paste("Top", input$cid2, "Happiest Countries by Year", sep = " ")
        fig1 <- plot_ly(top_10, x = ~year, y = ~rank, name = ~country,
               type = 'scatter', mode = 'lines', color= ~country)
        fig1 <- fig1 %>% layout(title = titl,
                      xaxis = list(title = NA),
                      yaxis = list(title = 'Rank', autorange = "reversed"))
        fig1
    })
    
    output$happinessPlot2 <- renderPlotly({
      happy_usa <- filter(all_years, country == input$text)
      
      if(input$text %in% Asia){ continent <- region_avg_ranks$Asia
                                y <- 'Asia'}
      if(input$text %in% Africa){ continent <- region_avg_ranks$Africa
                                  y <- 'Africa'}
      if(input$text %in% North_America){ continent <- region_avg_ranks$`North America`
                                         y <- 'North America'}
      if(input$text %in% South_America){ continent <- region_avg_ranks$`South America`
                                         y <- 'South America'}
      if(input$text %in% Europe){ continent <- region_avg_ranks$Europe
                                  y <- 'Europe'}
      if(input$text %in% Australia){ continent <- region_avg_ranks$Australia
                                     y <- 'Australia'}

      avg_ranks_spec <- data.frame(continent, region_avg_ranks$year)

      colnames(avg_ranks_spec) <- c("avg", "year")

      new_df <- inner_join(happy_usa, avg_ranks_spec)

      titl <- paste(input$text, "Rank by Year Against", y, "Average", sep = " ")
        
      fig2 <- plot_ly(new_df, x = ~year, y = ~rank, 
                      type = 'scatter',
                      mode = 'lines', 
                      color = 'red',
                      name = input$text)

      fig2 <- fig2 %>% layout(title = titl,
                        xaxis = list(title = NA),
                        yaxis = list(title = "Rank", autorange =
                                       'reversed'))
      fig2 <- fig2 %>% add_trace(y = ~new_df$avg, 
                                 name = paste(y, 'Avg', sep = ' '), 
                                 mode = 'lines', 
                                 line = list(dash = 'dash'))

      fig2
    })
    
    output$happinessPlot3 <- renderPlotly({
      
      happy_usa <- filter(all_years, country == input$text2)
      
      if(input$text2 %in% Asia){ continent <- region_avgs$Asia
                                x <- 'Asia'}
      if(input$text2 %in% Africa){ continent <- region_avgs$Africa
                                  x <- 'Africa'}
      if(input$text2 %in% North_America){ continent <- region_avgs$`North America`
                                         x <- 'North America'}
      if(input$text2 %in% South_America){ continent <- region_avgs$`South America`
                                         x <- 'South America'}
      if(input$text2 %in% Europe){ continent <- region_avgs$Europe
                                  x <- 'Europe'}
      if(input$text2 %in% Australia){ continent <- region_avgs$Australia
                                     x <- 'Australia'}

      avg_scores_spec <- data.frame(continent, region_avgs$year)

      colnames(avg_scores_spec) <- c("avg", "year")

      new_df <- inner_join(happy_usa, avg_scores_spec)

      titl <- paste(input$text2, "Score by Year Against", x, "Average", sep = " ")
        
      fig3 <- plot_ly(new_df, x = ~year, y = ~score, 
                      type = 'scatter',
                      mode = 'lines', 
                      color = 'red',
                      name = input$text2)

      fig3 <- fig3 %>% layout(title = titl,
                        xaxis = list(title = NA),
                        yaxis = list(title = "Score"))
      fig3 <- fig3 %>% add_trace(y = ~new_df$avg, 
                                 name = paste(x, 'Avg', sep = ' '), 
                                 mode = 'lines', 
                                 line = list(dash = 'dash'))

      fig3
    })
    
    output$happinessPlot4 <- renderPlot({
        dfx <- all_years[,c(2:9)]
        M <- cor(dfx)
        corrplot(M, method = 'number')
    })
    
    output$happinessPlot5 <- renderPlot({
        sample_rows <- sample(1:nrow(all_years),50)
        samp <- all_years[sample_rows,]
        plot(samp[,2:8], col = "navy", main = "Matrix Scatterplot")
    })

    output$happinessPlot6 <- renderPlotly({
      fig <- plot_ly(region_avgs, x = ~year)
      fig <- fig %>% add_trace( y = ~asia_avg, name = 'Asia', type = 'scatter', mode = 'lines')
      fig <- fig %>% add_trace( y = ~africa_avg, name = 'Africa', type = 'scatter', mode = 'lines')
      fig <- fig %>% add_trace( y = ~north_america_avg, name = 'North America', type = 'scatter', mode = 'lines')
      fig <- fig %>% add_trace( y = ~south_america_avg, name = 'South America', type = 'scatter', mode = 'lines')
      fig <- fig %>% add_trace( y = ~europe_avg, name = 'Europe', type = 'scatter', mode = 'lines')
      fig <- fig %>% add_trace( y = ~australia_avg, name = 'Australia', type = 'scatter', mode = 'lines')
      fig <- fig %>% layout(title = "Average Happiness Score by Continent",
                            xaxis = list(title = "Year"),
                            yaxis = list(title = "Average Score"))
      fig
    })
    
    output$info2 <- renderPrint({
      
      df_tree <- sample[, c(3, 5:10, 28)]
      tree_model <- rpart(rank ~ economy + family + life.exp + freedom + govt.corrupt + generosity + region, data = df_tree)
      
      summary(tree_model)
    })
    
    output$happinessPlot7 <- renderPlot({
      
      df_tree <- sample[, c(3, 5:10, 28)]
      tree_model <- rpart(rank ~ economy + family + life.exp + freedom + govt.corrupt + generosity + region, data = df_tree)
      
      draw.tree(tree_model, cex=1.3, 
           nodeinfo=TRUE, 
           cases="obs",
           digits=2, print.levels=TRUE,
           new=TRUE)
    }, height = 900, width = 1700)
    
      output$info3 <- renderPrint({
      
      df_tree <- sample[, c(3, 5:10, 28)]
      tree_model <- rpart(rank ~ economy + family + life.exp + freedom + govt.corrupt + generosity + region, data = df_tree)
      
      tree_pred <- (predict(tree_model, test))
      tree_gains <- gains(test$rank, tree_pred, groups = 7)
      tree_gains
    })
    
    output$happinessPlot8 <- renderPlot({
      
      df_tree <- sample[, c(3, 5:10, 28)]
      tree_model <- rpart(rank ~ economy + family + life.exp + freedom + govt.corrupt + generosity + region, data = df_tree)
      
      tree_pred <- (predict(tree_model, test))
      tree_gains <- gains(test$rank, tree_pred, groups = 7)
      plot(tree_gains)
    })
    
    output$happinessPlot9 <- renderPlotly({
      
        data <- all_years[, c(1:10, 27)]
        y1 <- filter(data, year == input$cid4)
        y1 <- filter(y1, region %in% input$continentboxid)
        
        x1 <- y1[, input$x]
        colnames(x1) <- 'xinput'
        
        x2 <- y1[, input$y]
        colnames(x2) <- 'yinput'
        
        dfx <- cbind(y1, x1, x2)
        
        plot1 <- plot_ly(dfx, x = ~xinput, y = ~yinput, color = ~country)
        plot1 <- plot1 %>% layout(xaxis = list(title = input$x), yaxis = list(title = input$y))
        plot1
    })
    
    output$happinessPlot10 <- renderPlotly({
      fig <- plot_ly(region_avg_ranks, x = ~year)
      fig <- fig %>% add_trace( y = ~asia_avg_rank, name = 'Asia', type = 'scatter', mode = 'lines')
      fig <- fig %>% add_trace( y = ~africa_avg_rank, name = 'Africa', type = 'scatter', mode = 'lines')
      fig <- fig %>% add_trace( y = ~north_america_avg_rank, name = 'North America', type = 'scatter', mode = 'lines')
      fig <- fig %>% add_trace( y = ~south_america_avg_rank, name = 'South America', type = 'scatter', mode = 'lines')
      fig <- fig %>% add_trace( y = ~europe_avg_rank, name = 'Europe', type = 'scatter', mode = 'lines')
      fig <- fig %>% add_trace( y = ~australia_avg_rank, name = 'Australia', type = 'scatter', mode = 'lines')
      fig <- fig %>% layout(title = "Average Rank by Continent",
                            xaxis = list(title = "Year"),
                            yaxis = list(title = "Average Rank"))
fig
    })
    
}

shinyApp(ui, server)
```


```{r}
fig <- plot_ly(region_avg_ranks, x = ~year)
fig <- fig %>% add_trace( y = ~asia_avg_rank, name = 'Asia', type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace( y = ~africa_avg_rank, name = 'Africa', type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace( y = ~north_america_avg_rank, name = 'North America', type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace( y = ~south_america_avg_rank, name = 'South America', type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace( y = ~europe_avg_rank, name = 'Europe', type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace( y = ~australia_avg_rank, name = 'Australia', type = 'scatter', mode = 'lines')
fig <- fig %>% layout(title = "Average Rank by Continent",
                      xaxis = list(title = "Year"),
                      yaxis = list(title = "Average Rank"))
fig
```

